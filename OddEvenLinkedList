/*QUESTION

Given a singly linked list, group all odd nodes together followed by the even nodes. Please note here we are talking about the node number and not the value in the nodes.

You should try to do it in place. The program should run in O(1) space complexity and O(nodes) time complexity.

Example 1:

Input: 1->2->3->4->5->NULL
Output: 1->3->5->2->4->NULL
Example 2:

Input: 2->1->3->5->6->4->7->NULL
Output: 2->3->6->7->1->5->4->NULL
*/

// SOLUTION :


/*1.using dummy nodes :
Time Complexity : O(n)
Space Complexity :O(1) */

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    
    public ListNode oddEvenList(ListNode head)
    {    //dummy nodes to simplify the code
        ListNode evenDummy = new ListNode(0);
        ListNode oddDummy = new ListNode(0);
        
        //to keep track of last added nodes
        ListNode even = evenDummy;
        ListNode odd = oddDummy;
        
        //to know the positions  of nodes  while traversing
        int n=0;
        ListNode temp = head;
        
        // loop untill we reach end of the list
        while(temp != null)
        {
            if(n%2 == 0)
            {
                even.next=temp;
                even = even.next;
            }
            else
            {
                odd.next = temp;
                odd = odd.next;
            }
            temp=temp.next;
            n++;
        } 
        odd.next = null;
        
        //appending list having odd positioned nodes to list having even positioned nodes
        even.next = oddDummy.next;
        
        return evenDummy.next;
    }
}


/* 2.by appending and deleting the nodes */

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
//function to add node at last of the list
    ListNode appendNode (ListNode head, int data )
    { 
        ListNode newNode =new ListNode(data);
        if(head == null)
        {
            head = new ListNode(data);
            return head;
        }
        newNode.next = null;
        ListNode temp = head;
        while(temp.next != null)
        {
            temp = temp.next;
        }
        temp.next = newNode;
        return head;
   }
   //function to delete node from list
    void deleteNode (ListNode head,ListNode node)
    {
        node.val = node.next.val;
        node.next = node.next.next;
        return ;
    }
    public ListNode oddEvenList(ListNode head)
    {
        int count=0;
        ListNode temp = head;
        if(head == null)
            return null;
            
         //to count the number of nodes in list 
        while(temp.next !=null)
        {
            count++;
            temp = temp.next;
        }
        int n = 0;
        ListNode temp1 = head;
        while(n <=count)
        {
            if(n%2 != 0)
            {
               head =   appendNode(head,temp1.val);//appending the node at last if it is at odd position in list
               deleteNode(head,temp1);//deleting node from the position it was present earlier
               temp1 = temp1.next;
               n = n+2;
           }
           else 
            {
               temp1 = temp1.next;
               n++;
            }
       }
        return head;
        
    }
}

